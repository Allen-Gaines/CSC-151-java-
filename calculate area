/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */
package com.mycompany.caculatearea.java;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author gainesa4579
 */
public class CaculateareaJava extends JFrame {
    // Main class variables for fireworks
    private ArrayList<Firework> fireworks;
    private Timer timer;
    private String userName;
    
    public static void main(String[] args) {
        // Get user name
        String userName = JOptionPane.showInputDialog(null, 
            "<html><span style='color: purple; font-size: 14pt;'>Please enter your name:</span></html>", 
            "Welcome", 
            JOptionPane.QUESTION_MESSAGE);
        
        if (userName != null && !userName.trim().isEmpty()) {
            // Show welcome message
            JOptionPane.showMessageDialog(null, 
                "<html>" +
                "<div style='text-align: center;'>" +
                "üåü <span style='color: blue; font-size: 16pt; font-family: Arial;'>Welcome,</span> üåü<br>" +
                "<span style='color: green; font-size: 18pt; font-family: Comic Sans MS;'>" + userName + "!</span><br>" +
                "<span style='color: #FF69B4; font-size: 12pt;'>to the Shape Area Calculator</span><br>" +
                "</div></html>",
                "Welcome", 
                JOptionPane.INFORMATION_MESSAGE);
            
            // Show fireworks
            CaculateareaJava app = new CaculateareaJava(userName);
            app.setVisible(true);
            
            // Wait for fireworks to finish (5 seconds)
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            
            app.setVisible(false);
            app.dispose();
            
            // Ask if the user wants to run the program
            int choice = JOptionPane.showConfirmDialog(null,
                "Do you want to calculate areas of shapes?",
                "Area Calculator",
                JOptionPane.YES_NO_OPTION);
            
            if (choice == JOptionPane.YES_OPTION) {
                ShapeCalculator.calculateShapeArea(userName);
            }
            
            // Show goodbye message
            showGoodbye(userName);
        } else {
            System.out.println("Hello World!");
        }
    }
    
    // Constructor for fireworks window
    public CaculateareaJava(String userName) {
        this.userName = userName;
        
        // Initialize fireworks
        fireworks = new ArrayList<>();
        Random random = new Random();
        
        setTitle("Welcome " + userName + "!");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setBackground(Color.BLACK);
        
        // Create timer for animation
        timer = new Timer(20, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Add new firework occasionally
                if (random.nextInt(20) == 0) {
                    fireworks.add(new Firework());
                }
                
                // Update and remove dead fireworks
                for (int i = fireworks.size() - 1; i >= 0; i--) {
                    Firework f = fireworks.get(i);
                    f.update();
                    if (f.isDead()) {
                        fireworks.remove(i);
                    }
                }
                
                repaint();
            }
        });
        timer.start();
    }
    
    // Paint method for fireworks
    @Override
    public void paint(Graphics g) {
        // Create double buffer
        Image offscreen = createImage(getWidth(), getHeight());
        Graphics2D offg = (Graphics2D) offscreen.getGraphics();
        
        // Clear background
        offg.setColor(Color.BLACK);
        offg.fillRect(0, 0, getWidth(), getHeight());
        
        // Draw all fireworks
        for (Firework f : fireworks) {
            f.draw(offg);
        }
        
        // Draw to screen
        g.drawImage(offscreen, 0, 0, this);
    }
    
    // Firework inner class
    private class Firework {
        private ArrayList<Particle> particles;
        private int lifespan;
        
        public Firework() {
            Random random = new Random();
            particles = new ArrayList<>();
            
            // Create explosion
            int x = random.nextInt(getWidth());
            int y = random.nextInt(getHeight() / 2);
            Color color = new Color(random.nextInt(256), random.nextInt(256), random.nextInt(256));
            
            for (int i = 0; i < 100; i++) {
                particles.add(new Particle(x, y, color));
            }
            
            lifespan = 100;
        }
        
        public void update() {
            for (Particle p : particles) {
                p.update();
            }
            lifespan--;
        }
        
        public void draw(Graphics2D g) {
            for (Particle p : particles) {
                p.draw(g);
            }
        }
        
        public boolean isDead() {
            return lifespan <= 0;
        }
    }
    
    // Particle inner class
    private class Particle {
        private double x, y;
        private double vx, vy;
        private Color color;
        
        public Particle(int x, int y, Color color) {
            this.x = x;
            this.y = y;
            this.color = color;
            
            Random random = new Random();
            double angle = random.nextDouble() * Math.PI * 2;
            double speed = random.nextDouble() * 2 + 1;
            
            vx = Math.cos(angle) * speed;
            vy = Math.sin(angle) * speed;
        }
        
        public void update() {
            x += vx;
            y += vy;
            vy += 0.03; // Gravity
        }
        
        public void draw(Graphics2D g) {
            g.setColor(color);
            g.fillOval((int) x, (int) y, 3, 3);
        }
    }
    
    // Goodbye message method
    private static void showGoodbye(String userName) {
        JDialog dialog = new JDialog();
        dialog.setTitle("Goodbye!");
        dialog.setSize(400, 300);
        dialog.setLocationRelativeTo(null);
        dialog.setLayout(new BorderLayout());
        
        JLabel label = new JLabel(
            "<html>" +
            "<div style='text-align: center;'>" +
            "<span style='color: blue; font-size: 24pt; font-family: Arial;'>Goodbye,</span><br>" +
            "<span style='color: green; font-size: 22pt; font-family: Comic Sans MS;'>" + userName + "!</span><br>" +
            "<span style='color: #FF69B4; font-size: 20pt;'>üëã</span>" +
            "</div></html>",
            JLabel.CENTER
        );
        dialog.add(label, BorderLayout.CENTER);
        
        // Create waving hand animation
        Timer waveTimer = new Timer(300, new ActionListener() {
            private int count = 0;
            private String[] waves = {"üëã", "üñêÔ∏è"};
            
            @Override
            public void actionPerformed(ActionEvent e) {
                if (count < 10) {
                    label.setText(
                        "<html>" +
                        "<div style='text-align: center;'>" +
                        "<span style='color: blue; font-size: 24pt; font-family: Arial;'>Goodbye,</span><br>" +
                        "<span style='color: green; font-size: 22pt; font-family: Comic Sans MS;'>" + userName + "!</span><br>" +
                        "<span style='color: #FF69B4; font-size: 20pt;'>" + waves[count % 2] + "</span>" +
                        "</div></html>"
                    );
                    count++;
                } else {
                    ((Timer)e.getSource()).stop();
                    dialog.dispose();
                }
            }
        });
        
        dialog.setVisible(true);
        waveTimer.start();
    }
}

// Shape Calculator class
class ShapeCalculator {
    // Shape calculation method
    public static void calculateShapeArea(String userName) {
        boolean continueCalculating = true;
        
        while (continueCalculating) {
            // Ask if shape is 3D or 2D
            int dimensionType = JOptionPane.showConfirmDialog(null,
                "Hi " + userName + ", is the shape 3D?",
                "Shape Dimension",
                JOptionPane.YES_NO_OPTION);
            
            if (dimensionType == JOptionPane.YES_OPTION) {
                calculate3DShapeArea();
            } else {
                calculate2DShapeArea();
            }
            
            // Ask if the user wants to calculate another shape
            int choice = JOptionPane.showConfirmDialog(null,
                "Do you want to calculate another shape, " + userName + "?",
                "Continue",
                JOptionPane.YES_NO_OPTION);
            
            // Update the loop control variable based on user's choice
            continueCalculating = (choice == JOptionPane.YES_OPTION);
        }
    }
    
    private static void calculate3DShapeArea() {
        // Get shape type from user
        String[] shapes = {"Sphere", "Cube", "Cylinder", "Cone"};
        String selectedShape = (String) JOptionPane.showInputDialog(null,
            "Select a 3D shape:",
            "Shape Selection",
            JOptionPane.QUESTION_MESSAGE,
            null,
            shapes,
            shapes[0]);
        
        if (selectedShape != null) {
            double result = 0;
            
            switch (selectedShape) {
                case "Sphere":
                    // Get radius for sphere
                    double radius = Double.parseDouble(JOptionPane.showInputDialog(
                        "Enter the radius of the sphere:"));
                    // Calculate surface area: 4œÄr¬≤
                    result = 4 * Math.PI * Math.pow(radius, 2);
                    break;
                    
                case "Cube":
                    // Get side length for cube
                    double side = Double.parseDouble(JOptionPane.showInputDialog(
                        "Enter the side length of the cube:"));
                    // Calculate surface area: 6a¬≤
                    result = 6 * Math.pow(side, 2);
                    break;
                    
                case "Cylinder":
                    // Get radius and height for cylinder
                    double cylinderRadius = Double.parseDouble(JOptionPane.showInputDialog(
                        "Enter the radius of the cylinder:"));
                    double cylinderHeight = Double.parseDouble(JOptionPane.showInputDialog(
                        "Enter the height of the cylinder:"));
                    // Calculate surface area: 2œÄr¬≤ + 2œÄrh
                    result = 2 * Math.PI * Math.pow(cylinderRadius, 2) + 
                             2 * Math.PI * cylinderRadius * cylinderHeight;
                    break;
                    
                case "Cone":
                    // Get radius and height for cone
                    double coneRadius = Double.parseDouble(JOptionPane.showInputDialog(
                        "Enter the radius of the cone:"));
                    double coneHeight = Double.parseDouble(JOptionPane.showInputDialog(
                        "Enter the height of the cone:"));
                    // Calculate slant height (l) using Pythagoras
                    double slantHeight = Math.sqrt(Math.pow(coneRadius, 2) + 
                                                Math.pow(coneHeight, 2));
                    // Calculate surface area: œÄr¬≤ + œÄrl
                    result = Math.PI * Math.pow(coneRadius, 2) + 
                             Math.PI * coneRadius * slantHeight;
                    break;
            }
            
            // Display the result with appropriate formatting
            JOptionPane.showMessageDialog(null,
                String.format("The surface area of the %s is: %.2f square units", 
                    selectedShape, result),
                "Result",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private static void calculate2DShapeArea() {
        // Get shape type from user
        String[] shapes = {"Circle", "Square", "Rectangle", "Triangle"};
        String selectedShape = (String) JOptionPane.showInputDialog(null,
            "Select a 2D shape:",
            "Shape Selection",
            JOptionPane.QUESTION_MESSAGE,
            null,
            shapes,
            shapes[0]);
        
        if (selectedShape != null) {
            double result = 0;
            
            switch (selectedShape) {
                case "Circle":
                    // Get radius for circle
                    double radius = Double.parseDouble(JOptionPane.showInputDialog(
                        "Enter the radius of the circle:"));
                    // Calculate area: œÄr¬≤
                    result = Math.PI * Math.pow(radius, 2);
                    break;
                    
                case "Square":
                    // Get side length for square
                    double side = Double.parseDouble(JOptionPane.showInputDialog(
                        "Enter the side length of the square:"));
                    // Calculate area: a¬≤
                    result = Math.pow(side, 2);
                    break;
                    
                case "Rectangle":
                    // Get length and width for rectangle
                    double length = Double.parseDouble(JOptionPane.showInputDialog(
                        "Enter the length of the rectangle:"));
                    double width = Double.parseDouble(JOptionPane.showInputDialog(
                        "Enter the width of the rectangle:"));
                    // Calculate area: l √ó w
                    result = length * width;
                    break;
                    
                case "Triangle":
                    // Get base and height for triangle
                    double base = Double.parseDouble(JOptionPane.showInputDialog(
                        "Enter the base of the triangle:"));
                    double height = Double.parseDouble(JOptionPane.showInputDialog(
                        "Enter the height of the triangle:"));
                    // Calculate area: (b √ó h)/2
                    result = (base * height) / 2;
                    break;
            }
            
            // Display the result with appropriate formatting
            JOptionPane.showMessageDialog(null,
                String.format("The area of the %s is: %.2f square units", 
                    selectedShape, result),
                "Result",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }
}
